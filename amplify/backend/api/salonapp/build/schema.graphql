
type reservation {
  id: ID!
  date: String
  menu: String
  stylistId: Int
  customerId: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type menu {
  id: ID!
  menu: String
  amountOfMoney: Int
  treatmentTime: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type stylist {
  id: ID!
  name: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type customer {
  id: ID!
  name: String
  mail: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type holiday {
  id: ID!
  date: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type shopmenu {
  id: ID!
  menu: String
  detail: String
  amountOfMoney: Int
  treatmentTime: Int
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type reserve {
  id: ID!
  date: String
  menu: String
  stylistId: Int
  customerId: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelReservationConnection {
  items: [reservation]!
  nextToken: String
}

input ModelReservationFilterInput {
  id: ModelIDInput
  date: ModelStringInput
  menu: ModelStringInput
  stylistId: ModelIntInput
  customerId: ModelStringInput
  and: [ModelReservationFilterInput]
  or: [ModelReservationFilterInput]
  not: ModelReservationFilterInput
}

type Query {
  getReservation(id: ID!): reservation
  listReservations(filter: ModelReservationFilterInput, limit: Int, nextToken: String): ModelReservationConnection
  getMenu(id: ID!): menu
  listMenus(filter: ModelMenuFilterInput, limit: Int, nextToken: String): ModelMenuConnection
  getStylist(id: ID!): stylist
  listStylists(filter: ModelStylistFilterInput, limit: Int, nextToken: String): ModelStylistConnection
  getCustomer(id: ID!): customer
  listCustomers(filter: ModelCustomerFilterInput, limit: Int, nextToken: String): ModelCustomerConnection
  getHoliday(id: ID!): holiday
  listHolidays(filter: ModelHolidayFilterInput, limit: Int, nextToken: String): ModelHolidayConnection
  getShopmenu(id: ID!): shopmenu
  listShopmenus(filter: ModelShopmenuFilterInput, limit: Int, nextToken: String): ModelShopmenuConnection
  getReserve(id: ID!): reserve
  listReserves(filter: ModelReserveFilterInput, limit: Int, nextToken: String): ModelReserveConnection
}

input ModelReservationConditionInput {
  date: ModelStringInput
  menu: ModelStringInput
  stylistId: ModelIntInput
  customerId: ModelStringInput
  and: [ModelReservationConditionInput]
  or: [ModelReservationConditionInput]
  not: ModelReservationConditionInput
}

input CreateReservationInput {
  id: ID
  date: String
  menu: String
  stylistId: Int
  customerId: String
}

input UpdateReservationInput {
  id: ID!
  date: String
  menu: String
  stylistId: Int
  customerId: String
}

input DeleteReservationInput {
  id: ID!
}

type Mutation {
  createReservation(input: CreateReservationInput!, condition: ModelReservationConditionInput): reservation
  updateReservation(input: UpdateReservationInput!, condition: ModelReservationConditionInput): reservation
  deleteReservation(input: DeleteReservationInput!, condition: ModelReservationConditionInput): reservation
  createMenu(input: CreateMenuInput!, condition: ModelMenuConditionInput): menu
  updateMenu(input: UpdateMenuInput!, condition: ModelMenuConditionInput): menu
  deleteMenu(input: DeleteMenuInput!, condition: ModelMenuConditionInput): menu
  createStylist(input: CreateStylistInput!, condition: ModelStylistConditionInput): stylist
  updateStylist(input: UpdateStylistInput!, condition: ModelStylistConditionInput): stylist
  deleteStylist(input: DeleteStylistInput!, condition: ModelStylistConditionInput): stylist
  createCustomer(input: CreateCustomerInput!, condition: ModelCustomerConditionInput): customer
  updateCustomer(input: UpdateCustomerInput!, condition: ModelCustomerConditionInput): customer
  deleteCustomer(input: DeleteCustomerInput!, condition: ModelCustomerConditionInput): customer
  createHoliday(input: CreateHolidayInput!, condition: ModelHolidayConditionInput): holiday
  updateHoliday(input: UpdateHolidayInput!, condition: ModelHolidayConditionInput): holiday
  deleteHoliday(input: DeleteHolidayInput!, condition: ModelHolidayConditionInput): holiday
  createShopmenu(input: CreateShopmenuInput!, condition: ModelShopmenuConditionInput): shopmenu
  updateShopmenu(input: UpdateShopmenuInput!, condition: ModelShopmenuConditionInput): shopmenu
  deleteShopmenu(input: DeleteShopmenuInput!, condition: ModelShopmenuConditionInput): shopmenu
  createReserve(input: CreateReserveInput!, condition: ModelReserveConditionInput): reserve
  updateReserve(input: UpdateReserveInput!, condition: ModelReserveConditionInput): reserve
  deleteReserve(input: DeleteReserveInput!, condition: ModelReserveConditionInput): reserve
}

type Subscription {
  onCreateReservation: reservation @aws_subscribe(mutations: ["createReservation"])
  onUpdateReservation: reservation @aws_subscribe(mutations: ["updateReservation"])
  onDeleteReservation: reservation @aws_subscribe(mutations: ["deleteReservation"])
  onCreateMenu: menu @aws_subscribe(mutations: ["createMenu"])
  onUpdateMenu: menu @aws_subscribe(mutations: ["updateMenu"])
  onDeleteMenu: menu @aws_subscribe(mutations: ["deleteMenu"])
  onCreateStylist: stylist @aws_subscribe(mutations: ["createStylist"])
  onUpdateStylist: stylist @aws_subscribe(mutations: ["updateStylist"])
  onDeleteStylist: stylist @aws_subscribe(mutations: ["deleteStylist"])
  onCreateCustomer: customer @aws_subscribe(mutations: ["createCustomer"])
  onUpdateCustomer: customer @aws_subscribe(mutations: ["updateCustomer"])
  onDeleteCustomer: customer @aws_subscribe(mutations: ["deleteCustomer"])
  onCreateHoliday: holiday @aws_subscribe(mutations: ["createHoliday"])
  onUpdateHoliday: holiday @aws_subscribe(mutations: ["updateHoliday"])
  onDeleteHoliday: holiday @aws_subscribe(mutations: ["deleteHoliday"])
  onCreateShopmenu: shopmenu @aws_subscribe(mutations: ["createShopmenu"])
  onUpdateShopmenu: shopmenu @aws_subscribe(mutations: ["updateShopmenu"])
  onDeleteShopmenu: shopmenu @aws_subscribe(mutations: ["deleteShopmenu"])
  onCreateReserve: reserve @aws_subscribe(mutations: ["createReserve"])
  onUpdateReserve: reserve @aws_subscribe(mutations: ["updateReserve"])
  onDeleteReserve: reserve @aws_subscribe(mutations: ["deleteReserve"])
}

type ModelMenuConnection {
  items: [menu]!
  nextToken: String
}

input ModelMenuFilterInput {
  id: ModelIDInput
  menu: ModelStringInput
  amountOfMoney: ModelIntInput
  treatmentTime: ModelIntInput
  and: [ModelMenuFilterInput]
  or: [ModelMenuFilterInput]
  not: ModelMenuFilterInput
}

input ModelMenuConditionInput {
  menu: ModelStringInput
  amountOfMoney: ModelIntInput
  treatmentTime: ModelIntInput
  and: [ModelMenuConditionInput]
  or: [ModelMenuConditionInput]
  not: ModelMenuConditionInput
}

input CreateMenuInput {
  id: ID
  menu: String
  amountOfMoney: Int
  treatmentTime: Int
}

input UpdateMenuInput {
  id: ID!
  menu: String
  amountOfMoney: Int
  treatmentTime: Int
}

input DeleteMenuInput {
  id: ID!
}

type ModelStylistConnection {
  items: [stylist]!
  nextToken: String
}

input ModelStylistFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelStylistFilterInput]
  or: [ModelStylistFilterInput]
  not: ModelStylistFilterInput
}

input ModelStylistConditionInput {
  name: ModelStringInput
  and: [ModelStylistConditionInput]
  or: [ModelStylistConditionInput]
  not: ModelStylistConditionInput
}

input CreateStylistInput {
  id: ID
  name: String
}

input UpdateStylistInput {
  id: ID!
  name: String
}

input DeleteStylistInput {
  id: ID!
}

type ModelCustomerConnection {
  items: [customer]!
  nextToken: String
}

input ModelCustomerFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  mail: ModelStringInput
  and: [ModelCustomerFilterInput]
  or: [ModelCustomerFilterInput]
  not: ModelCustomerFilterInput
}

input ModelCustomerConditionInput {
  name: ModelStringInput
  mail: ModelStringInput
  and: [ModelCustomerConditionInput]
  or: [ModelCustomerConditionInput]
  not: ModelCustomerConditionInput
}

input CreateCustomerInput {
  id: ID
  name: String
  mail: String
}

input UpdateCustomerInput {
  id: ID!
  name: String
  mail: String
}

input DeleteCustomerInput {
  id: ID!
}

type ModelHolidayConnection {
  items: [holiday]!
  nextToken: String
}

input ModelHolidayFilterInput {
  id: ModelIDInput
  date: ModelStringInput
  and: [ModelHolidayFilterInput]
  or: [ModelHolidayFilterInput]
  not: ModelHolidayFilterInput
}

input ModelHolidayConditionInput {
  date: ModelStringInput
  and: [ModelHolidayConditionInput]
  or: [ModelHolidayConditionInput]
  not: ModelHolidayConditionInput
}

input CreateHolidayInput {
  id: ID
  date: String
}

input UpdateHolidayInput {
  id: ID!
  date: String
}

input DeleteHolidayInput {
  id: ID!
}

type ModelShopmenuConnection {
  items: [shopmenu]!
  nextToken: String
}

input ModelShopmenuFilterInput {
  id: ModelIDInput
  menu: ModelStringInput
  detail: ModelStringInput
  amountOfMoney: ModelIntInput
  treatmentTime: ModelIntInput
  and: [ModelShopmenuFilterInput]
  or: [ModelShopmenuFilterInput]
  not: ModelShopmenuFilterInput
}

input ModelShopmenuConditionInput {
  menu: ModelStringInput
  detail: ModelStringInput
  amountOfMoney: ModelIntInput
  treatmentTime: ModelIntInput
  and: [ModelShopmenuConditionInput]
  or: [ModelShopmenuConditionInput]
  not: ModelShopmenuConditionInput
}

input CreateShopmenuInput {
  id: ID
  menu: String
  detail: String
  amountOfMoney: Int
  treatmentTime: Int
}

input UpdateShopmenuInput {
  id: ID!
  menu: String
  detail: String
  amountOfMoney: Int
  treatmentTime: Int
}

input DeleteShopmenuInput {
  id: ID!
}

type ModelReserveConnection {
  items: [reserve]!
  nextToken: String
}

input ModelReserveFilterInput {
  id: ModelIDInput
  date: ModelStringInput
  menu: ModelStringInput
  stylistId: ModelIntInput
  customerId: ModelStringInput
  and: [ModelReserveFilterInput]
  or: [ModelReserveFilterInput]
  not: ModelReserveFilterInput
}

input ModelReserveConditionInput {
  date: ModelStringInput
  menu: ModelStringInput
  stylistId: ModelIntInput
  customerId: ModelStringInput
  and: [ModelReserveConditionInput]
  or: [ModelReserveConditionInput]
  not: ModelReserveConditionInput
}

input CreateReserveInput {
  id: ID
  date: String
  menu: String
  stylistId: Int
  customerId: String
}

input UpdateReserveInput {
  id: ID!
  date: String
  menu: String
  stylistId: Int
  customerId: String
}

input DeleteReserveInput {
  id: ID!
}

